Given a string s, return the longest palindromic substring in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"
 

Constraints:

1 <= s.length <= 1000
s consist of only digits and English letters.

solution in c:
char* longestPalindrome(char* s) 
{
    int l=strlen(s);
    
    bool** dp = (bool**)malloc(l * sizeof(bool*));
    
    for(int i=0;i<l;i++)
    {
        dp[i]=(bool*)malloc(l*sizeof(bool));
        memset(dp[i],false,l*sizeof(bool));
    }
    
    //check for the substring of length of 1
    int max=1;
    int start=0;
    
    for(int i=0;i<l;i++)
    {
        dp[i][i]=true;
    }
    
    //check for the substring of length of 2
    for(int i=0;i<l-1;i++)
    {
        if(s[i]==s[i+1])
        {
            dp[i][i+1]=true;
            start=i;
            max=2;
        }
    }
    
    //check for the substring of length greater than 2
    for(int k=3;k<=l;k++)
    {
        for(int j = 0; j < l - k + 1; j++)
    {
      int i = j;
      int r = j + k - 1;
      if (dp[i + 1][r - 1] && s[i] == s[r])
      {
         dp[i][r] = true;
         if (k > max)
        {
            start = i;
            max = k;
        }
    }
}
    }
char *p=(char*)malloc((max+1)*sizeof(char));
int t=0;
int end=start+max-1;
for(int i=start;i<=end;i++)
{
   p[t++]=s[i];
}
p[t]='\0';

return p;
}
